#(pf (version 1.0))
(qrontab
 (param globalparam1 foobar)
 (param webconsole.title Qron Demo)
 (param webconsole.navtitle <font color=green>Qron Demo</font>)
 #(maxqueuedrequests 2)

 # tasks
 (taskgroup app1.batch
  (onstart(postnotice starting-%!taskid))
 )
 (task batch3(taskgroup app1.batch)(mean local)
  (command /bin/false)
  (target localhost)
  (trigger(cron 2/10 * * * * *))
  (resource memory 103)
  (label Nightly export of day transactions)
  (requestform
    (field (param begin)
      (label First day)
      (placeholder yyyy/mm/dd)
      (format "2[0-9]{3}/[0-9]{2}/[0-9]{2}")
      (appendcommand --start %begin)
      (setenv START %begin)
    )
    (field (param end)
      (label Last day)
      (placeholder "yyyy/mm/dd (default: = first day)")
      (format "2[0-9]{3}/[0-9]{2}/[0-9]{2}")
      (appendcommand --end %end)
      (setenv END %end)
    )
    (field (param dryrun)
      (label Dry run)
      (suggestion false) # default value in ui form
      (format "true|false")
      (appendcommand --dryrun %dryrun)
    )
   )
 )
 (task batch4(taskgroup app1.batch)(mean ssh)(target localhost)
  (discardaliasesonstart none)
  (command BARFOO=14 /tmp/foo "%{!date!yyyy}")
  (trigger(cron 1/10 * * * * *))
  (resource memory 104)
  #(onsuccess(requesttask app1.batch.batch5))
  (onsuccess(requesttask batch5))
 )
 (task batch5(taskgroup app1.batch)(mean ssh)(target localhost)
  (command /bin/true)
 )
 (task start1(taskgroup app1.batch)(mean ssh)(target localhost)
  (command /bin/true)
  (trigger(notice startup))
 )
 (task test1(taskgroup app1.batch)(mean http)(target notexist)
  (command /foo)
 )
 (host notexist(hostname notexist.localdomain))
 (task test2(taskgroup app1.batch)(mean http)(target blackhole)
  (command /foo)
 )
 (host blackhole(hostname 1.2.3.4))

 # infrastructure
 (host localhost(hostname localhost)(resource memory 128))
 (host server1(hostname server1)(resource memory 1024))
 (host server2(hostname server1)(resource memory 1024))
 (host server3(hostname server1)(resource memory 4096))
 (cluster cluster-back
   (host server1)(host server2)(host server3)(host server4)
   (balancing first)
 )

 # log
 (log(level debug)(file "/tmp/qron-debug-%{!date!yyyyMMdd}.log"))
 (log(level info)(file "/tmp/qron-%{!date!yyyyMMdd}.log"))

 # events
 (onschedulerstart
  # add a custom debug log for scheduler start
  (log scheduler started!)
  # post a notice which can be used as task trigger
  (postnotice startup)
 )
 (onconfigload
  # add a custom fatal log for config reload
  (log(severity fatal) config reloaded!)
 )
 (onstart
  # add a custom debug log for task start
  (log(severity debug) started a task! *%!taskshortid* "%{!date!yyyy}")
 )
 (onfinish
   (log(severity debug) finished a task! *%!taskshortid*)
 )
 (onsuccess
  # sending UDP packets to statsd server, see https://github.com/etsy/statsd
  (udp(address 127.0.0.1:8125)(message "task.%!taskid.ok:1|c"))
  (udp(address 127.0.0.1:8125)(message "task.%!taskid.time:%!totalms|ms"))
  # add a custom debug log for task success
  (log(severity debug) task success! *%!taskshortid*)
  # cancel a custom task failure alert
  (cancelalert failure.raised.%!taskid)
 )
 (onfailure
  # sending UDP packets to statsd
  (udp(address 127.0.0.1:8125)(message "task.%!taskid.ko:1|c"))
  # add a custom debug log for task failure
  (log(severity debug) task failure! *%!taskshortid*)
  # raise and even emit custom task failure alerts
  (raisealert failure.raised.%!taskid)
  (emitalert failure.emited.%!taskid)
 )
 (onnotice
  # add a custom log every time a notice is posted
  (log notice posted! *%!notice*)
 )
)
