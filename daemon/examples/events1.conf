#(pf (version 1.0))
(qrontab
 (param globalparam1 foobar)
 (param webconsole.title Qron Demo)
 (param webconsole.navtitle <font color=yellow>Qron Demo</font>)
 (param webconsole.titlehref "http://qron.eu")
 (param webconsole.cssoverload "body {background: #ffffb0 url('img/work_na.png') no-repeat}")
 (param webconsole.customactions.taskslist '<span class="label label-success" title="Custom button"><a href="whatever?fqtn=%!fqtn&year=%!yyyy"><i class="fa fa-fw fa-globe"></i></a></span>')
 (param webconsole.customactions.requestslist '<span class="label label-success" title="Custom button"><a href="whatever?fqtn=%!fqtn&id=%!taskrequestid&status=%!status"><i class="fa fa-fw fa-globe"></i></a></span>')
 (param webconsole.customactions.taskdetail '<a class="btn btn-success" href="whatever?fqtn=%!fqtn"><i class="fa fa-fw fa-globe"></i> Custom button</a>')
 #(maxqueuedrequests 2)

 # tasks
 (taskgroup app1.batch
  (onstart(postnotice starting-%!fqtn))
 )
 (task batch3(taskgroup app1.batch)(mean local)
  (info "batch number 3 http://myurl.com/batch3")
  (label "batch 3 label http://myurl.com/batch3")
  (command /bin/false)
  (target localhost)
  (trigger(cron 2/10 * * * * *))
  (resource memory 103)
 )
 (task batch4(taskgroup app1.batch)(mean ssh)(target localhost)
  (discardaliasesonstart none)
  (command BARFOO=14 /tmp/foo %!yyyy)
  (trigger(cron 1/10 * * * * *))
  (resource memory 104)
  #(onsuccess(requesttask app1.batch.batch5))
  (onsuccess(requesttask batch5))
 )
 (task batch5(taskgroup app1.batch)(mean ssh)(target localhost)
  (command /bin/true)
  (trigger(cron 0 0 6 * * *))
 )
 (task batch6(taskgroup app1.batch)(mean ssh)(target localhost)
  (command /bin/true)
  (trigger(cron 0 0 0 * * 1))
 )
 (task start1(taskgroup app1.batch)(mean ssh)(target localhost)
  (command /bin/true)
  (trigger(notice startup))
 )
 (task test1(taskgroup app1.batch)(mean http)(target notexist)
  (command /foo)
 )
 (host notexist(hostname notexist.localdomain))
 (task test2(taskgroup app1.batch)(mean http)(target blackhole)
  (command /foo)
 )
 (host blackhole(hostname 1.2.3.4))

 # infrastructure
 (host localhost(hostname localhost)(resource memory 128))
 (host server1(hostname server1)(resource memory 1024))
 (host server2(hostname server1)(resource memory 1024))
 (host server3(hostname server1)(resource memory 4096))
 (cluster cluster-back
   (host server1)(host server2)(host server3)(host server4)
   (balancing first)
 )

 # log
 (log(level debug)(file "/tmp/qron-debug-%!yyyy%!mm%!dd.log"))
 (log(level info)(file "/tmp/qron-%!yyyy%!mm%!dd.log"))

 # events
 (onschedulerstart
  # add a custom debug log for scheduler start
  (log scheduler started!)
  # post a notice which can be used as task trigger
  (postnotice startup)
 )
 (onconfigload
  # add a custom fatal log for config reload
  (log(severity fatal) "config reloaded! >>> see http://myurl.com/reload/ <<<")
 )
 (onstart
  # add a custom debug log for task start
  (log(severity debug) started a task! *%!taskshortid* %!yyyy)
 )
 (onfinish
  (log(severity debug) finished a task! *%!taskshortid*)
 )
 (onsuccess
  # sending UDP packets to statsd server, see https://github.com/etsy/statsd
  (udp(address 127.0.0.1:8125)(message "task.%!fqtn.ok:1|c"))
  (udp(address 127.0.0.1:8125)(message "task.%!fqtn.time:%!totalms|ms"))
  # add a custom debug log for task success
  (log(severity debug) task success! *%!taskshortid*)
  # cancel a custom task failure alert
  (cancelalert failure.raised.%!fqtn)
 )
 (onfailure
  # sending UDP packets to statsd
  (udp(address 127.0.0.1:8125)(message "task.%!fqtn.ko:1|c"))
  # add a custom debug log for task failure
  (log(severity debug) task failure! *%!taskshortid*)
  # raise and even emit custom task failure alerts
  (raisealert failure.raised.%!fqtn)
  (emitalert failure.emited.%!fqtn)
 )
 (onnotice
  # add a custom log every time a notice is posted
  (log notice posted! *%!notice*)
 )
)
