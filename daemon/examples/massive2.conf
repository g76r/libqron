#(pf (version 1.0))
# configuration file to test qron tolerance to a high number of tasks execution
# (10 executions / second)
(qrontab
 #(maxtotaltaskinstances 1)

 # tasks
 (taskgroup(id massive))
 (task (id true1)(taskgroup massive)(mean local)
  (command /bin/true)
  (target localhost)
  (trigger(cron * * * * * *)(cron * * * * * *)(notice foo)(notice bar))
  (info http://www.google.com/)
  (maxinstances 10)
  (resource memory 103)
  (onstart(postnotice starting-%!fqtn))
  (onsuccess(requesttask true5))
  (minexpectedduration 1)
  (maxexpectedduration .001)
  (requestform
    (field(param p1)(label param1)
      (format "[0-9]{2}")
      (placeholder "nn")
      (appendcommand %p1)
    )
  )
 )
 (task (id true2)(taskgroup massive)(mean local)
  (command /bin/true)
  (info this task can be run https://foo or http://bar)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
  (minexpectedduration 1)
 )
 (task (id nocommand1)(taskgroup massive)(mean local)
  #(command /bin/false)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
  (maxexpectedduration .001)
 )
 (task (id true3)(taskgroup massive)(mean local)
  (command /bin/true)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id true4)(taskgroup massive)(mean local)
  (command /bin/true)
  #(target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id true5)(taskgroup massive)(mean local)
  (command /bin/true)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id notexist1)(taskgroup massive)(mean local)
  (command /bin/notexist)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id notexecutable1)(taskgroup massive)(mean local)
  (command /etc/hosts)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id notarget1)(taskgroup massive)(mean ssh)
  (command /bin/true)
  (trigger(cron * * * * * *))
 )
 (task (id donothing1)(taskgroup massive)(mean donothing)
  #(command /qron/)
  #(target localhost)
  (trigger(cron * * * * * *))
 )
 (task (id poll1)(taskgroup massive)(mean http)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )
 (task (id poll2)(taskgroup massive)(mean http)
  (method put)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
  (param method post)
 )
 (task (id poll3)(taskgroup massive)(mean http)
  (method post)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
  (param method put)
 )
 (task (id poll4)(taskgroup massive)(mean http)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )
 (task (id poll5)(taskgroup massive)(mean http)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )

 # infrastructure
 (host(id localhost)(hostname localhost)(resource memory 8192))

 # alerts
 (alerts
  (rule(match task.failure.app1.batch.*) # task.failure.%!fqtn
        (mail(address gb@localhost, root@localhost))
   )
   (rule(match task.failure.app1.batch.*) # task.failure.%!fqtn
        (udp(address 127.0.0.1:4242)
            (emitmessage task failure: %!alertid)
            (cancelmessage task back to success: %!alertid))
        (mail(address nobody@localhost)) # this is an error 
        (stop) # do not process next rules if this one matches
   )
   (rule(match resource.exhausted.**) # resource.exhausted.%!kind.%!target
        (mail(address gb@localhost))
        #(nocancelnotify) # do not send messages when alerts are canceled
   )
   (rule(log(address debug)) # match every alert (but those stopped before)
        (udp(address localhost:4243))
   )
   (param mindelaybetweensend 60)
   (param canceldelay 90)
 )

 # events
 (onschedulerstart
  # add a custom debug log for scheduler start
  (log(message scheduler started!))
  # post a notice which can be used as task trigger
  (postnotice startup)
 )
 (onconfigload
  # add a custom fatal log for config reload
  (log(severity fatal)(message config reloaded!))
 )
 (onstart
  # add a custom debug log for task start
  (log(severity debug)(message started a task! *%!taskid* %!yyyy))
  (setflag %!taskid-running)
 )
 (onfinish
   (clearflag %!taskid-running)
 )
 (onsuccess
  # sending UDP packets to statsd server, see https://github.com/etsy/statsd
  (udp(address 127.0.0.1:8125)(message "task.%!fqtn.ok:1|c"))
  (udp(address 127.0.0.1:8125)(message "task.%!fqtn.time:%!totalms|ms"))
  # add a custom debug log for task success
  (log(severity debug)(message task success! *%!taskid*))
  # cancel a custom task failure alert
  (cancelalert failure.raised.%!fqtn)
 )
 (onfailure
  # sending UDP packets to statsd
  (udp(address 127.0.0.1:8125)(message "task.%!fqtn.ko:1|c"))
  # add a custom debug log for task failure
  (log(severity debug)(message task failure! *%!taskid*))
  # raise and even emit custom task failure alerts
  (raisealert failure.raised.%!fqtn)
  (emitalert failure.emited.%!fqtn)
 )
 (onnotice
  # add a custom log every time a notice is posted
  (log(message notice posted! *%!notice*))
 )

 # log
 #(log(level debug)(file "/tmp/qron-debug-%!yyyy%!mm%!dd-%!HH%!MM%!SS.log"))
 (log(level debug)(file "/tmp/qron-debug-%!yyyy%!mm%!dd.log"))
 (log(level info)(file "/tmp/qron-%!yyyy%!mm%!dd.log"))
)
