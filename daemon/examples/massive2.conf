#(pf (version 1.0))
# configuration file to test qron tolerance to a high number of tasks execution
# (10 executions / second)
(qrontab
 #(maxtotaltaskinstances 1)
 (unsetenv LS_COLORS TERMCAP)

 # tasks
 (taskgroup massive)
 (task true1(taskgroup massive)(mean local)
  (command /bin/true)
  (target localhost)
  (trigger(cron * * * * * *)(cron * * * * * *)(notice foo)(notice bar))
  (info http://www.google.com/)
  (maxinstances 10)
  (resource memory 103)
  (onstart(postnotice starting-%!taskid))
  (onsuccess(requesttask true5))
  (minexpectedduration 1)
  (maxexpectedduration .001)
  (requestform
    (field(param p1)(label param1)
      (format "[0-9]{2}")
      (placeholder "nn")
      (appendcommand %p1)
    )
    (field(param p2)(label param2)
      (format "[0-9]{2}")
      (suggestion "42")
      (appendcommand %p1)
      (setenv FOO %p1)
    )
  )
 )
 (task true2(taskgroup massive)(mean ssh)
  #(command /bin/sleep 3600)
  (command /bin/true)
  (info this task can be run https://foo or http://bar)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
  (minexpectedduration 1)
 )
 (task nocommand1(taskgroup massive)(mean local)
  #(command /bin/false)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
  (maxexpectedduration .001)
 )
 (task true3(taskgroup massive)(mean local)
  (command /bin/true)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task true4(taskgroup massive)(mean local)
  (command /bin/true)
  #(target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task true5(taskgroup massive)(mean local)
  (command /bin/true)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task notexist1(taskgroup massive)(mean local)
  (command /bin/notexist)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task notexecutable1(taskgroup massive)(mean local)
  (command /etc/hosts)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task notarget1(taskgroup massive)(mean ssh)
  (command /bin/true)
  (trigger(cron * * * * * *))
 )
 (task donothing1(taskgroup massive)(mean donothing)
  #(command /qron/)
  #(target localhost)
  (trigger(cron * * * * * *))
 )
 (task poll1(taskgroup massive)(mean http)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )
 (task poll2(taskgroup massive)(mean http)
  (method put)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
  (param method post)
 )
 (task poll3(taskgroup massive)(mean http)
  (method post)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
  (param method put)
 )
 (task poll4(taskgroup massive)(mean http)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )
 (task poll5(taskgroup massive)(mean http)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )

 # infrastructure
 (host localhost(hostname localhost)(resource memory 8192))

 # alerts
 (alerts
  (rule(match task.failure.app1.batch.*) # task.failure.%!taskid
        (mail(address gb@localhost, root@localhost))
   )
   (rule(match task.failure.app1.batch.*) # task.failure.%!taskid
        (udp(address 127.0.0.1:4242)
            (emitmessage task failure: %!alertid)
            (cancelmessage task back to success: %!alertid))
        (mail(address nobody@localhost)) # this is an error 
        (stop) # do not process next rules if this one matches
   )
   (rule(match resource.exhausted.**) # resource.exhausted.%!kind.%!target
        (mail(address gb@localhost))
        #(nocancelnotify) # do not send messages when alerts are canceled
   )
   (rule(log(address debug)) # match every alert (but those stopped before)
        (udp(address localhost:4243))
   )
   (param mindelaybetweensend 60)
   (param canceldelay 90)
 )

 # events
 (onschedulerstart
  # add a custom debug log for scheduler start
  (log scheduler started!)
  # post a notice which can be used as task trigger
  (postnotice startup)
 )
 (onconfigload
  # add a custom fatal log for config reload
  (log(severity fatal) config reloaded!)
 )
 (onstart
  # add a custom debug log for task start
  (log(severity debug) started a task! *%!taskshortid* "%{!date!yyyy}")
 )
 (onfinish
   (log(severity debug) finished a task! *%!taskshortid*)
 )
 (onsuccess
  # sending UDP packets to statsd server, see https://github.com/etsy/statsd
  (udp(address 127.0.0.1:8125)(message "task.%!taskid.ok:1|c"))
  (udp(address 127.0.0.1:8125)(message "task.%!taskid.time:%!totalms|ms"))
  # add a custom debug log for task success
  (log(severity debug) task success! *%!taskshortid*)
  # cancel a custom task failure alert
  (cancelalert failure.raised.%!taskid)
 )
 (onfailure
  # sending UDP packets to statsd
  (udp(address 127.0.0.1:8125)(message "task.%!taskid.ko:1|c"))
  # add a custom debug log for task failure
  (log(severity debug) task failure! *%!taskshortid*)
  # raise and even emit custom task failure alerts
  (raisealert failure.raised.%!taskid)
  (emitalert failure.emited.%!taskid)
 )
 (onnotice
  # add a custom log every time a notice is posted
  (log notice posted! *%!notice*)
 )

 # log
 #(log(level debug)(file "/tmp/qron-debug-%{!date!yyyyMMdd-hhmmss}.log"))
 (log(level debug)(file "/tmp/qron-debug-%{!date!yyyyMMdd}.log"))
 (log(level info)(file "/tmp/qron-%{!date!yyyyMMdd}.log"))
)
