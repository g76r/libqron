#(pf (version 1.0))
#
# configuration file to test qron tolerance to a high number of tasks execution
# (10 executions / second)
(qrontab
 #(maxtotaltaskinstances 1)

 # tasks
 (taskgroup(id massive))
 (task (id true1)(taskgroup massive)(mean local)
  (command /bin/true)
  (target localhost)
  (trigger(cron * * * * * *)(cron * * * * * *)(notice foo)(notice bar))
  (info http://www.google.com/)
  (maxinstances 10)
  (resource memory 103)
 )
 (task (id true2)(taskgroup massive)(mean local)
  (command /bin/true)
  (info this task can be run https://foo or http://bar)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id nocommand1)(taskgroup massive)(mean local)
  #(command /bin/false)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id true3)(taskgroup massive)(mean local)
  (command /bin/true)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id true4)(taskgroup massive)(mean local)
  (command /bin/true)
  #(target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id true5)(taskgroup massive)(mean local)
  (command /bin/true)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id notexist1)(taskgroup massive)(mean local)
  (command /bin/notexist)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id notexecutable1)(taskgroup massive)(mean local)
  (command /etc/hosts)
  (target localhost)
  (trigger(cron * * * * * *))
  (resource memory 103)
 )
 (task (id notarget1)(taskgroup massive)(mean ssh)
  (command /bin/true)
  (trigger(cron * * * * * *))
 )
 (task (id donothing1)(taskgroup massive)(mean donothing)
  #(command /qron/)
  #(target localhost)
  (trigger(cron * * * * * *))
 )
 (task (id poll1)(taskgroup massive)(mean http)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )
 (task (id poll2)(taskgroup massive)(mean http)
  (method put)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )
 (task (id poll3)(taskgroup massive)(mean http)
  (method post)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )
 (task (id poll4)(taskgroup massive)(mean http)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )
 (task (id poll5)(taskgroup massive)(mean http)
  (command /qron/)
  (target localhost)
  (trigger(cron * * * * * *))
 )

 # infrastructure
 (host(id localhost)(hostname localhost)(resource memory 8192))

 # alerts
 (alerts
  (rule(match task.failure.app1.batch.*) # task.failure.%!fqtn
        (mail(address gb@localhost, root@localhost))
   )
   (rule(match task.failure.app1.batch.*) # task.failure.%!fqtn
        (udp(address 127.0.0.1:4242)
            (emitmessage task failure: %!alertid)
            (cancelmessage task back to success: %!alertid))
        (mail(address nobody@localhost)) # this is an error 
        (stop) # do not process next rules if this one matches
   )
   (rule(match resource.exhausted.**) # resource.exhausted.%!kind.%!target
        (mail(address gb@localhost))
        #(nocancelnotify) # do not send messages when alerts are canceled
   )
   (rule(log(address debug)) # match every alert (but those stopped before)
        (udp(address localhost:4243))
   )
   (param mindelaybetweensend 60)
   (param canceldelay 90)
 )

 # log
 #(log(level debug)(file "/tmp/qron-debug-%!yyyy%!mm%!dd-%!HH%!MM%!SS.log"))
 (log(level debug)(file "/tmp/qron-debug-%!yyyy%!mm%!dd.log"))
 (log(level info)(file "/tmp/qron-%!yyyy%!mm%!dd.log"))
)
